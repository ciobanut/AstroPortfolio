---
import { Icon } from "astro-icon";
import ButtonOrLinkTag from "@components/Form/Button/ButtonOrLinkTag.astro";

const { href, title, icon, variant, size, border, type, ...props } = Astro.props;

const btn = {
  Default: {
    base: " group relative flex gap-2 overflow-hidden inline-flex items-center justify-center ",
  },
  Variant: {
    default: "bg-slate-100 text-slate-900 ",
    primary: "bg-primary text-white ",
    secondary: "bg-secondary text-white ",
    link: "bg-transparent text-primary-950 py-0 pr-2 ",
    badge:
      "bg-slate-100 hover:bg-slate-200 text-slate-500 hover:text-slate-700 rounded-full",
  },
  Size: {
    default: "rounded text-base font-medium px-3 py-2",
    sm: " rounded text-sm font-normal px-2 py-0.5 grow-0",
    md: " rounded-md text-base font-medium px-3 py-1.5",
    lg: " rounded-lg text-lg sm:px-7 sm:py-2.5 px-5 py-2",
  },
};
function getClassNames(variant: string, size: string) {
  let classNames = btn.Variant[variant] || btn.Variant.default;
  classNames += btn.Size[size] || btn.Size.default;
  return classNames;
}

let btnClassNames =
  btn.Default.base +
  getClassNames(variant, size) +
  (border ? " border border-1 border-slate-300" : "");
---

<ButtonOrLinkTag href={href} className={btnClassNames} type={type} {...props}>
  <slot />
  <span class="z-40">{title}</span>
  {
    icon && (
      <>
        <Icon
          name={icon}
          className=" z-40 w-3 h-3 transition-all duration-300 group-hover:translate-x-1"
        />
      </>
    )
  }
  <div
    class="absolute inset-0 z-20 h-[200%] w-[200%] translate-x-[-70%] rotate-45 bg-white/20 transition-all duration-1000 group-hover:translate-x-[50%] group-hover:scale-100"
  >
  </div>
</ButtonOrLinkTag>
